unit unTestTLS;

uses unSSL_TLS;

function Test_MD5SHA: byte;
function Test_HMAC_MD5: byte;
function Test_HMAC_SHA1: byte;
function Test_PRF1(): byte;
function Test_PRF2(): byte;
function Test_PRF3(): byte;

implementation

// Return value:
//   0 - success
//   1 - error
function Test_MD5_1(): byte;
const md5Test : array[1]  of byte = (0x7F);
const expected: array[16] of byte = 
  (0x83, 0xAC, 0xB6, 0xE6, 0x7E, 0x50, 0xE3, 0x1D,
   0xB6, 0xED, 0x34, 0x1D, 0xD2, 0xDE, 0x15, 0x95);
var msg: array[1] of byte;
    res: array[16] of byte;
    i: byte;
begin
  result := 1; // prepare for error  
  msg[0] := md5Test[0];
  MD5SHAFinal(@msg, @res, 1, 1, 0);
  for i := 0 to 15 do
    begin
      if res[i] <> expected[i] then // difference detected, exit
        begin
          result := 1;
          exit;
        end;
    end;
  result := 0;
end;

// Return value:
//   0 - success
//   1 - error
function Test_MD5_2(): byte;
const md5Test : array[39] of byte =
     (0x86, 0xDB, 0xEF, 0x8C, 0xC3, 0xD9, 0x3F, 0x34, 0x0F, 0xB3, 0x1E, 0x92, 0xC2,
      0x32, 0x4B, 0xC3, 0x30, 0x1B, 0x91, 0x96, 0xAB, 0xF4, 0x29, 0x22, 0x63, 0xAB,
      0x0B, 0x88, 0x3E, 0x00, 0x24, 0x23, 0xF0, 0x63, 0x28, 0x0B, 0x0F, 0x38, 0x5F);
const expected: array[16] of byte =
     (0x92, 0x03, 0x2B, 0x50, 0x2A, 0xE7, 0x36, 0x97, 0x3A, 0xC4, 0xBE, 0x67, 0xE2, 
      0x63, 0x80, 0x9A);
var msg: array[39] of byte;
    res: array[16] of byte;
    i: byte;
begin
  result := 1; // prepare for error 
  for i := 0 to 38 do
    msg[i] := md5Test[i];
  MD5SHAFinal(@msg, @res, 39, 1, 0);
  for i := 0 to 15 do
    begin
      if res[i] <> expected[i] then // difference detected, exit
        begin
          result := 1;
          exit;
        end;
    end;
  result := 0;
end;

// Return value:
//   0 - success
//   1 - error
function Test_MD5_3(): byte;
const md5Test : array[64] of byte =
  (0x31, 0x04, 0xC2, 0xE2, 0x3C, 0x21, 0xC1, 0x74, 0xA5, 0x12, 0xC7, 0xDF, 
   0x0D, 0xFA, 0x11, 0xDE, 0x82, 0xFF, 0x6D, 0x9B, 0x8C, 0xA8, 0x63, 0x31, 
   0x97, 0x0F, 0x8C, 0x29, 0xA5, 0xBD, 0x5F, 0x58, 0xDB, 0xFC, 0x87, 0x4B, 
   0x9F, 0x3F, 0x81, 0x13, 0x6E, 0x8F, 0xB1, 0xAA, 0xC2, 0xD2, 0x44, 0xC6, 
   0x97, 0x63, 0x75, 0x26, 0xC8, 0xA6, 0x80, 0xB3, 0x07, 0x2C, 0x86, 0x27, 
   0x2F, 0xA6, 0x84, 0xBF);

const expected: array[16] of byte =
     (0x51, 0xE4, 0x63, 0x88, 0xBB, 0xC0, 0x48, 0xDF, 
      0x39, 0x14, 0x58, 0x2F, 0x8E, 0xD3, 0x2E, 0x0E);
var msg: array[64] of byte;
    res: array[16] of byte;
    i: byte;
begin
  result := 1; // prepare for error
  // Out = 92032B502AE736973AC4BE67E263809A
  for i := 0 to 63 do
    msg[i] := md5Test[i];
  MD5SHAFinal(@msg, @res, 64, 1, 0);
  for i := 0 to 15 do
    begin
      if res[i] <> expected[i] then // difference detected, exit
        begin
          result := 1;
          exit;
        end;
    end;
  result := 0;
end;

// Return value:
//   0 - success
//   1 - error in md5
//   2 - error in sha1
//   3 - error in both md5 and sha
function Test_MD5SHA: byte;
const inTest : array[3285] of byte =
  (
 0x01, 0x00, 0x00, 0x74, 0x03, 0x02, 0x59, 0xAD, 0xA1, 0x0B, 0x3F, 0xD1, 0x29, 0x78, 0xBA, 0x9F, 0xEA, 0xDA, 0x76, 0x3A, 0xF9, 0x7A, 0x88, 0x4F, 0xA3, 0x07, 0xC8, 0x45, 0xEE, 0xCD, 0x8C, 0x0A, 0x65, 0x2B, 0x61, 0x4C, 0x40, 0xA9, 0x00, 0x00, 0x02, 0x00, 0x2F, 0x01, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x11, 0x00, 0x0F, 0x00, 0x00, 0x0C, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6F, 0x6F, 0x6B,
 0x2E, 0x63, 0x6F, 0x6D, 0x00, 0x05, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x10, 0x00, 0x0E, 0x00, 0x1D, 0x00, 0x17, 0x00, 0x19, 0x00, 0x18, 0x00, 0x1A, 0x00, 0x1B, 0x00, 0x1C, 0x00, 0x0B, 0x00, 0x02, 0x01, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0xFF, 0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x35, 0x03, 0x02, 0x5F,
 0xDB, 0xD3, 0x80, 0xD6, 0x36, 0x18, 0x2B, 0xB7, 0x36, 0x0E, 0x5B, 0xAD, 0xBD, 0x1A, 0x97, 0x3D, 0xCC, 0xA9, 0xCE, 0x68, 0x01, 0x56, 0xB4, 0xC8, 0x13, 0x0E, 0xA6, 0x87, 0xE4, 0xBF, 0x7A, 0x00, 0x00, 0x2F, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x01, 0x00, 0x01, 0x00, 0x00, 0x23, 0x00, 0x00, 0x0B, 0x00, 0x0C, 0xB7, 0x00, 0x0C, 0xB4, 0x00, 0x07, 0xF9, 0x30, 0x82, 0x07, 0xF5, 0x30, 0x82, 0x06, 0xDD, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10, 0x02, 0x2C, 0xB1, 0x14, 0x84, 0x9E, 0xF3, 0x20, 0x78,
 0x8A, 0x71, 0x8B, 0x35, 0x91, 0x73, 0x5B, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x30, 0x70, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x15, 0x30, 0x13, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x13, 0x0C, 0x44, 0x69, 0x67, 0x69, 0x43, 0x65, 0x72, 0x74, 0x20, 0x49, 0x6E, 0x63, 0x31, 0x19, 0x30,
 0x17, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x13, 0x10, 0x77, 0x77, 0x77, 0x2E, 0x64, 0x69, 0x67, 0x69, 0x63, 0x65, 0x72, 0x74, 0x2E, 0x63, 0x6F, 0x6D, 0x31, 0x2F, 0x30, 0x2D, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x26, 0x44, 0x69, 0x67, 0x69, 0x43, 0x65, 0x72, 0x74, 0x20, 0x53, 0x48, 0x41, 0x32, 0x20, 0x48, 0x69, 0x67, 0x68, 0x20, 0x41, 0x73, 0x73, 0x75, 0x72, 0x61, 0x6E, 0x63, 0x65,
 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x43, 0x41, 0x30, 0x1E, 0x17, 0x0D, 0x31, 0x37, 0x30, 0x35, 0x31, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5A, 0x17, 0x0D, 0x31, 0x38, 0x30, 0x36, 0x32, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x30, 0x5A,
 0x30, 0x69, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x13, 0x0A, 0x43, 0x61, 0x6C, 0x69, 0x66, 0x6F, 0x72, 0x6E, 0x69, 0x61, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03,
 0x55, 0x04, 0x07, 0x13, 0x0A, 0x4D, 0x65, 0x6E, 0x6C, 0x6F, 0x20, 0x50, 0x61, 0x72, 0x6B, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03,
 0x55, 0x04, 0x0A, 0x13, 0x0E, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6F, 0x6F, 0x6B, 0x2C, 0x20, 0x49, 0x6E, 0x63, 0x2E, 0x31, 0x17,
 0x30, 0x15, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x0E, 0x2A, 0x2E, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6F, 0x6F, 0x6B, 0x2E, 0x63,
 0x6F, 0x6D, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0F, 0x00, 0x30, 0x82, 0x01, 0x0A, 0x02, 0x82, 0x01, 0x01, 0x00, 0xA0, 0xBF, 0x2B, 0xF6, 0x61, 0xE8, 0x8E, 0x4E, 0x17, 0x64, 0xB1, 0x2A, 0x5A, 0x15, 0xD1, 0xD7, 0xD0, 0x0B, 0xF4, 0x29, 0xD3, 0xE7, 0x5D, 0xD3, 0x13, 0xE6, 0xCA, 0x07, 0x9D, 0x51, 0xFF, 0x87, 0x61, 0x20, 0x78, 0xED, 0xCA, 0x8B, 0xD1, 0x77, 0x4E, 0x8E, 0x80, 0xCA, 0x73, 0xA7, 0xF9, 0x39, 0x9E, 0xFD, 0x78, 0x0D, 0x26, 0xF9, 0xF9, 0x62, 0x59, 0xD6, 0xBD, 0xB4, 0xBE, 0x8A, 0x80, 0x2A, 0xEE, 0x38, 0x1D, 0xE0, 0x6A, 0xA5, 0x2C, 0x7C, 0x9D, 0xBB, 0x82, 0x73, 0x99, 0xA1, 0xDC, 0x07, 0x27, 0x56, 0xE6, 0x13, 0xD1, 0x3B, 0xF5, 0x7E, 0x80, 0x9E, 0x5F, 0x00, 0x57, 0x72, 0x3A, 0x9B, 0x29, 0xDB, 0xD4, 0x2F, 0x76, 0x88, 0x1D, 0x7A, 0x97, 0xFF, 0x33, 0x01, 0xA8, 0x38, 0xF9, 0x81, 0xCB, 0x5C, 0x6D, 0x28, 0x65, 0x99, 0xA7, 0x3E, 0x49, 0xB7, 0xAA, 0x2B, 0x7F, 0xAD, 0x03, 0xCE, 0x28, 0x6E, 0x25, 0x40, 0x99, 0xCF, 0xA9, 0xF1, 0x87, 0xE9, 0xC6, 0x0C, 0x8F, 0x6F, 0xE6, 0x45, 0x2F, 0xA6, 0xC1, 0xBD, 0x70, 0xE9, 0xA2, 0x3E, 0x3A, 0x18, 0xDE, 0x74, 0x0F, 0x04, 0xDE, 0xCE, 0x53, 0x97, 0x68, 0xED, 0x87, 0x9A, 0x3A, 0x95, 0xBB, 0xF3, 0xA8, 0x68, 0xB9, 0x48, 0x4C, 0x9B, 0xAE, 0x24, 0xA1, 0xD6, 0x40, 0xF8, 0xE7, 0x26, 0xC4, 0x3E, 0xBB, 0x16, 0xF0, 0x74, 0x85, 0x9E, 0x6B, 0xA7, 0x9E, 0x9B, 0x28, 0x8B, 0x2F, 0x64, 0x60, 0x03, 0x13, 0x7B, 0x40, 0xDC, 0x3E, 0xBA, 0x91, 0xFF, 0x7B, 0xCA, 0x30, 0xA8, 0x9D, 0xD3, 0xD2, 0x7E, 0x53, 0x6D, 0x64, 0xC7, 0xDF, 0xE0, 0xA2, 0x84, 0x77, 0xB3, 0xDB, 0xA6, 0x48, 0x1B, 0xAF, 0x83, 0xEB, 0x1F, 0x8D, 0x9C, 0xE4, 0x94, 0x5B, 0x7C, 0x03, 0xF1, 0x0B, 0x0C, 0x4C, 0x6C, 0x35, 0x27, 0x6A, 0x74, 0x15, 0x8B, 0xB5, 0xA1, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3, 0x82, 0x04, 0x90, 0x30, 0x82, 0x04, 0x8C, 0x30, 0x1F, 0x06, 0x03, 0x55, 0x1D, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x51, 0x68, 0xFF, 0x90, 0xAF, 0x02, 0x07, 0x75, 0x3C, 0xCC, 0xD9, 0x65, 0x64, 0x62, 0xA2, 0x12, 0xB8, 0x59, 0x72, 0x3B, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 0x0E, 0x04, 0x16, 0x04, 0x14, 0xB8, 0x7B, 0xD8, 0x61, 0x5A, 0x2E, 0x6F, 0xE0, 0xC8, 0x7D, 0x65, 0xBD, 0x1E, 0x41, 0xE2, 0x1D, 0x03, 0xCE, 0x25, 0x8A, 0x30, 0x81, 0xC7, 0x06, 0x03, 0x55, 0x1D, 0x11, 0x04, 0x81, 0xBF, 0x30, 0x81, 0xBC, 0x82, 0x0E, 0x2A, 0x2E, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6F, 0x6F, 0x6B, 0x2E, 0x63, 0x6F, 0x6D, 0x82, 0x0E, 0x2A, 0x2E, 0x78, 0x78, 0x2E, 0x66, 0x62, 0x63, 0x64, 0x6E, 0x2E, 0x6E, 0x65, 0x74, 0x82, 0x0E, 0x2A, 0x2E, 0x78, 0x7A, 0x2E, 0x66, 0x62, 0x63, 0x64, 0x6E, 0x2E, 0x6E, 0x65, 0x74, 0x82, 0x0C, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6F, 0x6F, 0x6B, 0x2E, 0x63, 0x6F, 0x6D, 0x82, 0x0B, 0x2A, 0x2E, 0x66, 0x62, 0x73, 0x62, 0x78, 0x2E, 0x63, 0x6F, 0x6D, 0x82, 0x0E, 0x2A, 0x2E, 0x78, 0x79, 0x2E, 0x66, 0x62, 0x63, 0x64, 0x6E, 0x2E, 0x6E, 0x65, 0x74, 0x82, 0x0E, 0x2A, 0x2E, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6F, 0x6F, 0x6B, 0x2E, 0x6E, 0x65, 0x74, 0x82, 0x0F, 0x2A, 0x2E, 0x6D, 0x65, 0x73, 0x73, 0x65, 0x6E, 0x67, 0x65, 0x72, 0x2E, 0x63, 0x6F, 0x6D, 0x82, 0x08, 0x2A, 0x2E, 0x66, 0x62, 0x2E, 0x63, 0x6F, 0x6D, 0x82, 0x06, 0x66, 0x62, 0x2E, 0x63, 0x6F, 0x6D, 0x82, 0x0B, 0x2A, 0x2E, 0x66, 0x62, 0x63, 0x64, 0x6E, 0x2E, 0x6E, 0x65, 0x74, 0x82, 0x10, 0x2A, 0x2E, 0x6D, 0x2E, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6F, 0x6F, 0x6B, 0x2E, 0x63, 0x6F, 0x6D, 0x82, 0x0D, 0x6D, 0x65, 0x73, 0x73, 0x65, 0x6E, 0x67, 0x65, 0x72, 0x2E, 0x63, 0x6F, 0x6D, 0x30, 0x0E, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x01, 0x01, 0xFF, 0x04, 0x04, 0x03, 0x02, 0x05, 0xA0, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 0x25, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x06, 0x08,
 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x30, 0x75, 0x06, 0x03, 0x55, 0x1D, 0x1F, 0x04, 0x6E, 0x30, 0x6C, 0x30, 0x34, 0xA0, 0x32, 0xA0, 0x30, 0x86, 0x2E, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x63, 0x72, 0x6C, 0x33, 0x2E, 0x64, 0x69, 0x67, 0x69, 0x63, 0x65, 0x72, 0x74, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x68, 0x61, 0x2D, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2D, 0x67, 0x35, 0x2E, 0x63, 0x72, 0x6C, 0x30, 0x34, 0xA0, 0x32, 0xA0, 0x30, 0x86, 0x2E, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x63, 0x72, 0x6C, 0x34, 0x2E, 0x64, 0x69, 0x67, 0x69, 0x63, 0x65, 0x72, 0x74, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x68, 0x61, 0x2D, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2D, 0x67, 0x35, 0x2E, 0x63, 0x72, 0x6C, 0x30, 0x4C, 0x06, 0x03, 0x55, 0x1D, 0x20, 0x04, 0x45, 0x30, 0x43, 0x30, 0x37, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x86, 0xFD, 0x6C, 0x01, 0x01, 0x30, 0x2A, 0x30, 0x28, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x02, 0x01, 0x16, 0x1C, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x64, 0x69, 0x67, 0x69, 0x63, 0x65, 0x72, 0x74, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x43, 0x50, 0x53, 0x30, 0x08, 0x06, 0x06, 0x67, 0x81, 0x0C, 0x01, 0x02, 0x02, 0x30, 0x81, 0x83, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01, 0x04, 0x77, 0x30, 0x75, 0x30, 0x24, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x01, 0x86, 0x18, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x6F, 0x63, 0x73, 0x70, 0x2E, 0x64, 0x69, 0x67, 0x69, 0x63, 0x65, 0x72, 0x74, 0x2E, 0x63, 0x6F, 0x6D, 0x30, 0x4D, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x02, 0x86, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x63, 0x61, 0x63, 0x65, 0x72, 0x74, 0x73, 0x2E, 0x64, 0x69, 0x67, 0x69, 0x63, 0x65, 0x72, 0x74, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x44, 0x69, 0x67, 0x69, 0x43, 0x65, 0x72, 0x74, 0x53, 0x48, 0x41, 0x32, 0x48, 0x69, 0x67, 0x68, 0x41, 0x73, 0x73, 0x75, 0x72, 0x61, 0x6E, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x41, 0x2E, 0x63, 0x72, 0x74, 0x30, 0x0C, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x01, 0x01, 0xFF, 0x04, 0x02, 0x30, 0x00, 0x30, 0x82, 0x01, 0xF6, 0x06, 0x0A, 0x2B, 0x06, 0x01, 0x04, 0x01, 0xD6, 0x79, 0x02, 0x04, 0x02, 0x04, 0x82, 0x01, 0xE6, 0x04, 0x82, 0x01, 0xE2, 0x01, 0xE0, 0x00, 0x76, 0x00, 0xA4, 0xB9, 0x09, 0x90, 0xB4, 0x18, 0x58, 0x14, 0x87, 0xBB, 0x13, 0xA2, 0xCC, 0x67, 0x70, 0x0A, 0x3C, 0x35, 0x98, 0x04, 0xF9, 0x1B, 0xDF, 0xB8, 0xE3, 0x77, 0xCD, 0x0E, 0xC8, 0x0D, 0xDC, 0x10, 0x00, 0x00, 0x01, 0x5C, 0x12, 0xE5, 0x67, 0x03, 0x00, 0x00, 0x04, 0x03, 0x00, 0x47, 0x30, 0x45, 0x02, 0x21, 0x00, 0xBC, 0x5E, 0xBA, 0xBC, 0xE4, 0x6B, 0x47, 0xF0, 0x18, 0x02, 0x3A, 0xAB, 0x58, 0x22, 0xF3, 0xAB, 0xEF, 0x99, 0x2D, 0x05, 0x2B, 0x39, 0x98, 0xF6, 0x6C, 0xE8, 0x87, 0x9B, 0xB2, 0xDE, 0x90, 0xF3, 0x02, 0x20, 0x09, 0x5C, 0x20, 0x7C, 0x59, 0xEF, 0x9C, 0xBB, 0x5B, 0x27, 0x9E, 0xC9, 0x75, 0x87, 0x1C, 0x0C, 0x52, 0x23, 0x38, 0xD0, 0x71, 0x62, 0xC5, 0xA5, 0x99, 0x37, 0xDB, 0xE2, 0xCF, 0x7C, 0x6A, 0xCA, 0x00, 0x75, 0x00, 0x56, 0x14, 0x06, 0x9A, 0x2F, 0xD7, 0xC2, 0xEC, 0xD3, 0xF5, 0xE1, 0xBD, 0x44, 0xB2, 0x3E, 0xC7, 0x46, 0x76, 0xB9, 0xBC, 0x99, 0x11, 0x5C, 0xC0, 0xEF, 0x94, 0x98, 0x55, 0xD6, 0x89, 0xD0, 0xDD, 0x00, 0x00, 0x01, 0x5C, 0x12, 0xE5, 0x67, 0xF9, 0x00, 0x00, 0x04, 0x03, 0x00, 0x46, 0x30, 0x44, 0x02, 0x20, 0x1E, 0x3F, 0x82, 0x23, 0x6F, 0xE1, 0x22, 0x45, 0x02, 0x0A, 0x84, 0x10, 0x23, 0xB1, 0xE4, 0xDB, 0x5C, 0x72, 0x1A, 0x34, 0x51, 0x5C, 0x0E, 0x1A, 0x67, 0x39, 0x78, 0xC8, 0xC5, 0x47, 0xF6, 0x96, 0x02, 0x20, 0x32, 0x16, 0x37, 0xD0, 0x0A, 0xAE, 0x93, 0x5C, 0x94, 0x79, 0xDB, 0x69, 0x1F, 0x8A, 0xBB, 0xD1, 0x78, 0x34, 0x8C, 0x6D, 0xBD, 0xFD, 0x25,
 0xAB, 0x03, 0x93, 0xBE, 0xB2, 0x0E, 0xD2, 0x59, 0x7C, 0x00, 0x76, 0x00, 0xEE, 0x4B, 0xBD, 0xB7, 0x75, 0xCE, 0x60, 0xBA, 0xE1, 0x42, 0x69, 0x1F, 0xAB, 0xE1, 0x9E, 0x66, 0xA3, 0x0F, 0x7E, 0x5F, 0xB0, 0x72, 0xD8, 0x83, 0x00, 0xC4, 0x7B, 0x89, 0x7A, 0xA8, 0xFD, 0xCB, 0x00, 0x00, 0x01, 0x5C, 0x12, 0xE5, 0x67, 0x42, 0x00, 0x00, 0x04, 0x03, 0x00, 0x47, 0x30, 0x45, 0x02, 0x21, 0x00, 0x88, 0xD9, 0x46, 0xFA, 0xFF, 0x7F, 0xEB, 0x69, 0x5D, 0x9D, 0x7A, 0xD5, 0xF7, 0x86, 0x02, 0x77, 0x21, 0x11, 0x9E, 0x8F, 0x79, 0x82, 0x0F, 0x88, 0xA2, 0x6B, 0xD9, 0xCA, 0x9D, 0xEA, 0xC7, 0xF7, 0x02, 0x20, 0x3B, 0xF8, 0xA5, 0xBF, 0x3E, 0x84, 0x22, 0x2E, 0xD1, 0x5F, 0x59, 0x54, 0x5A, 0x48, 0x48, 0x24, 0xDC, 0xAC, 0xA5, 0xA8, 0x1E, 0x0A, 0x1A, 0xB9, 0x9A, 0xFA, 0xC8, 0xF4, 0x1D, 0x1D, 0xF0, 0x75, 0x00, 0x77, 0x00, 0xBB, 0xD9, 0xDF, 0xBC, 0x1F, 0x8A, 0x71, 0xB5, 0x93, 0x94, 0x23, 0x97, 0xAA, 0x92, 0x7B, 0x47, 0x38, 0x57, 0x95, 0x0A, 0xAB, 0x52, 0xE8, 0x1A, 0x90, 0x96, 0x64, 0x36, 0x8E, 0x1E, 0xD1, 0x85, 0x00, 0x00, 0x01, 0x5C, 0x12, 0xE5, 0x67, 0xBC, 0x00, 0x00, 0x04, 0x03, 0x00, 0x48, 0x30, 0x46, 0x02, 0x21, 0x00, 0xB8, 0xE0, 0xD7, 0x76, 0xB4, 0x6D, 0xAC, 0x27, 0xB6, 0x97, 0x1E, 0x7B, 0x0A, 0xF9, 0x09, 0xD6, 0xCE, 0x94, 0xBA, 0x5F, 0x11, 0x5F, 0x1C, 0xAD, 0x0B, 0xCB, 0x11, 0xF5, 0x28, 0x29, 0x08, 0x0E, 0x02, 0x21, 0x00, 0x98, 0x1E, 0x25, 0xEE, 0xE6, 0x9B, 0x9B, 0x2A, 0x9F, 0xC3, 0xD1, 0xD9, 0xBE, 0xA4, 0xB8, 0xAC, 0x51, 0x3F, 0x31, 0x65, 0xC1, 0xC5, 0x32, 0x90, 0x89, 0x6F, 0xB3, 0xC1, 0xCB, 0x65, 0xFB, 0xA9, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x94, 0xC0, 0xBB, 0xE7, 0x25, 0xAD, 0xD0, 0x0D, 0x36, 0xE7, 0x68, 0xBF, 0x31, 0x54, 0x9A, 0xA0, 0x00, 0x8D, 0x2B, 0x83, 0x39, 0x6D, 0x56, 0x81, 0x77, 0x35, 0x85, 0x62, 0x98, 0x52, 0x25, 0x91, 0x48, 0x8A, 0x1B, 0xBD, 0x69, 0x66, 0x40, 0x62, 0x3F, 0xB7, 0x4D, 0x10, 0xB5, 0x60, 0x92, 0x75, 0xE2, 0xC6, 0x74, 0xF6, 0x6A, 0x01, 0xA7, 0x06, 0xDA, 0xDC, 0x00, 0xE1, 0x49, 0x46, 0x12, 0xA6, 0x68, 0x21, 0x00, 0x4B, 0x94, 0xE3, 0x49, 0x27, 0xFE, 0x72, 0x6D, 0x6F, 0x00, 0xCA, 0x7E, 0xA0, 0x44, 0x19, 0xC5, 0xF0, 0x4F, 0xA4, 0x08, 0x11, 0xBB, 0x1E, 0x8E, 0xEC, 0xF7, 0xAC, 0x83, 0xDC, 0x2C, 0x50, 0xA0, 0xC3, 0x99, 0x9A, 0x77, 0x4B, 0x47, 0xBC, 0x13, 0x9B, 0x52, 0xA2, 0x1D, 0x17, 0x64, 0x45, 0x0F, 0x56, 0x0C, 0xBC, 0x74, 0x31, 0xFC, 0x07, 0x21, 0x2B, 0x81, 0x0A, 0x2F, 0x8A, 0xDE, 0xA4, 0x2C, 0x3D, 0x1A, 0x21, 0x51, 0x0B, 0x20, 0x5F, 0xF5, 0x7D, 0x71, 0x88, 0xD8, 0x8C, 0x48, 0x1B, 0x82, 0x1E, 0x7B, 0xF1, 0x5F, 0xDE, 0x4E, 0xCF, 0x7D, 0xEA, 0xF3, 0x3C, 0xB0, 0x95, 0xE7, 0xAC, 0xE9, 0x50, 0x4B, 0x27, 0x4F, 0x56, 0x9D, 0x22, 0xEF, 0x8F, 0x0D, 0xF6, 0xC0, 0x90, 0x8D, 0xFE, 0x25, 0x47, 0xBD, 0x6F, 0x63, 0x67, 0x9B, 0x7C, 0x21, 0x27, 0xC6, 0x46, 0x9C, 0xB4, 0x28, 0x30, 0xC5, 0xF2, 0xC2, 0x34, 0x97, 0x20, 0x97, 0x4C, 0x15, 0x31, 0x9C, 0x27, 0xFE, 0x7E, 0x39, 0xC6, 0x97, 0x52, 0x7E, 0x5D, 0xD1, 0x68, 0x08, 0xFE, 0xC6, 0x5F, 0x69, 0x08, 0xD0, 0xF8, 0x89, 0xE1, 0xB3, 0xBA, 0x1B, 0xB0, 0x35, 0x52, 0x9E, 0x1D, 0xF2, 0x8F, 0x9C, 0xE2, 0xBE, 0x5F, 0x18, 0x16, 0x83, 0x8A, 0xF4, 0x82, 0x10, 0x8A, 0x8A, 0x53, 0x84, 0x51, 0xAA, 0xC1, 0x25, 0x74, 0x00, 0x04, 0xB5, 0x30, 0x82, 0x04, 0xB1, 0x30, 0x82, 0x03, 0x99, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10, 0x04, 0xE1, 0xE7, 0xA4, 0xDC, 0x5C, 0xF2, 0xF3, 0x6D, 0xC0, 0x2B, 0x42, 0xB8, 0x5D, 0x15, 0x9F, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x30, 0x6C, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x15, 0x30, 0x13, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x13, 0x0C, 0x44, 0x69, 0x67, 0x69, 0x43, 0x65, 0x72, 0x74,
 0x20, 0x49, 0x6E, 0x63, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x13, 0x10, 0x77, 0x77, 0x77, 0x2E, 0x64, 0x69, 0x67, 0x69, 0x63, 0x65, 0x72, 0x74, 0x2E, 0x63, 0x6F, 0x6D, 0x31, 0x2B, 0x30, 0x29, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x22, 0x44, 0x69, 0x67, 0x69, 0x43, 0x65, 0x72, 0x74, 0x20, 0x48, 0x69, 0x67, 0x68, 0x20, 0x41, 0x73, 0x73, 0x75, 0x72, 0x61, 0x6E, 0x63, 0x65, 0x20, 0x45, 0x56, 0x20, 0x52, 0x6F, 0x6F, 0x74, 0x20, 0x43, 0x41, 0x30, 0x1E, 0x17, 0x0D, 0x31, 0x33, 0x31, 0x30, 0x32, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x30, 0x5A, 0x17, 0x0D, 0x32, 0x38, 0x31, 0x30, 0x32, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x30, 0x5A, 0x30, 0x70, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x15, 0x30, 0x13, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x13, 0x0C, 0x44, 0x69, 0x67, 0x69, 0x43, 0x65, 0x72, 0x74, 0x20, 0x49, 0x6E, 0x63, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x13, 0x10, 0x77, 0x77, 0x77, 0x2E, 0x64, 0x69, 0x67, 0x69, 0x63, 0x65, 0x72, 0x74, 0x2E, 0x63, 0x6F, 0x6D, 0x31, 0x2F, 0x30, 0x2D, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x26, 0x44, 0x69, 0x67, 0x69, 0x43, 0x65, 0x72, 0x74, 0x20, 0x53, 0x48, 0x41, 0x32, 0x20, 0x48, 0x69, 0x67, 0x68, 0x20, 0x41, 0x73, 0x73, 0x75, 0x72, 0x61, 0x6E, 0x63, 0x65, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x43, 0x41, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0F, 0x00, 0x30, 0x82, 0x01, 0x0A, 0x02, 0x82, 0x01, 0x01, 0x00, 0xB6, 0xE0, 0x2F, 0xC2, 0x24, 0x06, 0xC8, 0x6D, 0x04, 0x5F, 0xD7, 0xEF, 0x0A, 0x64, 0x06, 0xB2, 0x7D, 0x22, 0x26, 0x65, 0x16, 0xAE, 0x42, 0x40, 0x9B, 0xCE, 0xDC, 0x9F, 0x9F, 0x76, 0x07, 0x3E, 0xC3, 0x30, 0x55, 0x87, 0x19, 0xB9, 0x4F, 0x94, 0x0E, 0x5A, 0x94, 0x1F, 0x55, 0x56, 0xB4, 0xC2, 0x02, 0x2A, 0xAF, 0xD0, 0x98, 0xEE, 0x0B, 0x40, 0xD7, 0xC4, 0xD0, 0x3B, 0x72, 0xC8, 0x14, 0x9E, 0xEF, 0x90, 0xB1, 0x11, 0xA9, 0xAE, 0xD2, 0xC8, 0xB8, 0x43, 0x3A, 0xD9, 0x0B, 0x0B, 0xD5, 0xD5, 0x95, 0xF5, 0x40, 0xAF, 0xC8, 0x1D, 0xED, 0x4D, 0x9C, 0x5F, 0x57, 0xB7, 0x86, 0x50, 0x68, 0x99, 0xF5, 0x8A, 0xDA, 0xD2, 0xC7, 0x05, 0x1F, 0xA8, 0x97, 0xC9, 0xDC, 0xA4, 0xB1, 0x82, 0x84, 0x2D, 0xC6, 0xAD, 0xA5, 0x9C, 0xC7, 0x19, 0x82, 0xA6, 0x85, 0x0F, 0x5E, 0x44, 0x58, 0x2A, 0x37, 0x8F, 0xFD, 0x35, 0xF1, 0x0B, 0x08, 0x27, 0x32, 0x5A, 0xF5, 0xBB, 0x8B, 0x9E, 0xA4, 0xBD, 0x51, 0xD0, 0x27, 0xE2, 0xDD, 0x3B, 0x42, 0x33, 0xA3, 0x05, 0x28, 0xC4, 0xBB, 0x28, 0xCC, 0x9A, 0xAC, 0x2B, 0x23, 0x0D, 0x78, 0xC6, 0x7B, 0xE6, 0x5E, 0x71, 0xB7, 0x4A, 0x3E, 0x08, 0xFB, 0x81, 0xB7, 0x16, 0x16, 0xA1, 0x9D, 0x23, 0x12, 0x4D, 0xE5, 0xD7, 0x92, 0x08, 0xAC, 0x75, 0xA4, 0x9C, 0xBA, 0xCD, 0x17, 0xB2, 0x1E, 0x44, 0x35, 0x65, 0x7F, 0x53, 0x25, 0x39, 0xD1, 0x1C, 0x0A, 0x9A, 0x63,
 0x1B, 0x19, 0x92, 0x74, 0x68, 0x0A, 0x37, 0xC2, 0xC2, 0x52, 0x48, 0xCB, 0x39, 0x5A, 0xA2, 0xB6, 0xE1, 0x5D, 0xC1, 0xDD, 0xA0, 0x20, 0xB8, 0x21, 0xA2, 0x93, 0x26, 0x6F, 0x14, 0x4A, 0x21, 0x41, 0xC7, 0xED, 0x6D, 0x9B, 0xF2, 0x48, 0x2F, 0xF3, 0x03, 0xF5, 0xA2, 0x68, 0x92, 0x53, 0x2F, 0x5E, 0xE3, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3, 0x82, 0x01, 0x49, 0x30, 0x82, 0x01, 0x45, 0x30,
 0x12, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x01, 0x01, 0xFF, 0x04, 0x08, 0x30, 0x06, 0x01, 0x01, 0xFF, 0x02, 0x01, 0x00, 0x30, 0x0E,
 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x01, 0x01, 0xFF, 0x04, 0x04, 0x03, 0x02, 0x01, 0x86, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 0x25,
 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05,
 0x07, 0x03, 0x02, 0x30, 0x34, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01, 0x04, 0x28, 0x30, 0x26,
 0x30, 0x24,
 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x01, 0x86, 0x18, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x6F, 0x63, 0x73, 0x70, 0x2E, 0x64, 0x69, 0x67, 0x69, 0x63, 0x65, 0x72, 0x74, 0x2E, 0x63, 0x6F, 0x6D, 0x30, 0x4B, 0x06, 0x03, 0x55, 0x1D, 0x1F, 0x04, 0x44, 0x30, 0x42, 0x30, 0x40, 0xA0, 0x3E, 0xA0, 0x3C, 0x86, 0x3A, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x63,
 0x72, 0x6C, 0x34, 0x2E, 0x64, 0x69, 0x67, 0x69, 0x63, 0x65, 0x72, 0x74, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x44, 0x69, 0x67, 0x69, 0x43, 0x65, 0x72, 0x74, 0x48, 0x69, 0x67, 0x68, 0x41, 0x73, 0x73, 0x75, 0x72, 0x61, 0x6E, 0x63, 0x65, 0x45, 0x56, 0x52, 0x6F, 0x6F, 0x74, 0x43, 0x41, 0x2E, 0x63, 0x72, 0x6C, 0x30, 0x3D, 0x06, 0x03, 0x55, 0x1D, 0x20, 0x04, 0x36, 0x30, 0x34, 0x30, 0x32, 0x06, 0x04, 0x55, 0x1D, 0x20, 0x00, 0x30, 0x2A, 0x30, 0x28, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x02, 0x01, 0x16, 0x1C, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x64, 0x69, 0x67, 0x69, 0x63, 0x65, 0x72, 0x74, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x43, 0x50, 0x53, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 0x0E, 0x04, 0x16, 0x04, 0x14, 0x51, 0x68, 0xFF, 0x90, 0xAF, 0x02, 0x07, 0x75, 0x3C, 0xCC, 0xD9, 0x65, 0x64, 0x62, 0xA2, 0x12, 0xB8, 0x59, 0x72, 0x3B, 0x30, 0x1F, 0x06, 0x03, 0x55, 0x1D, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xB1, 0x3E, 0xC3, 0x69, 0x03, 0xF8, 0xBF, 0x47, 0x01, 0xD4, 0x98, 0x26, 0x1A, 0x08, 0x02, 0xEF, 0x63, 0x64, 0x2B, 0xC3, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x18, 0x8A, 0x95, 0x89, 0x03, 0xE6, 0x6D, 0xDF, 0x5C, 0xFC, 0x1D, 0x68, 0xEA, 0x4A, 0x8F, 0x83, 0xD6, 0x51, 0x2F, 0x8D, 0x6B, 0x44, 0x16, 0x9E, 0xAC, 0x63, 0xF5, 0xD2, 0x6E, 0x6C, 0x84, 0x99, 0x8B, 0xAA, 0x81, 0x71, 0x84, 0x5B, 0xED, 0x34, 0x4E, 0xB0, 0xB7, 0x79, 0x92, 0x29, 0xCC, 0x2D, 0x80, 0x6A, 0xF0, 0x8E, 0x20, 0xE1, 0x79,
 0xA4, 0xFE, 0x03, 0x47, 0x13, 0xEA, 0xF5, 0x86, 0xCA, 0x59, 0x71, 0x7D, 0xF4, 0x04, 0x96, 0x6B, 0xD3, 0x59, 0x58, 0x3D, 0xFE, 0xD3, 0x31, 0x25, 0x5C, 0x18, 0x38, 0x84, 0xA3, 0xE6, 0x9F, 0x82, 0xFD, 0x8C, 0x5B, 0x98, 0x31, 0x4E, 0xCD, 0x78, 0x9E, 0x1A, 0xFD, 0x85, 0xCB, 0x49, 0xAA, 0xF2, 0x27, 0x8B);

const expectedMD5: array[16] of byte =
     (0x44, 0xc9, 0x8a, 0x5b, 0x59, 0xde, 0x64, 0x8a, 0xb4, 0x4b, 0xa6, 0x81, 0x2a, 
      0x53, 0x0e, 0x19);
const expectedSHA1: array[20] of byte =
     (0x78, 0xa5, 0xb1, 0x6d, 0x5f, 0x69, 0x2b, 0x48, 0xd8, 0x17, 0x12, 0x2e, 0xa7, 
      0x06, 0x56, 0x72, 0x11, 0x71, 0x6b, 0x5c);
var
    resMD5: array[16] of byte;
    resSHA1: array[20] of byte;
    i: word;
begin
  result := 0;
  toHashMD5.firstBlock := true;
  toHashMD5.dataLength := 0;
  
  toHashSHA1.firstBlock := true;
  toHashSHA1.dataLength := 0;
  
  for i := 0 to 3284 do
    begin
      AddToHash(inTest[i], 1); // MD5
      AddToHash(inTest[i], 0); // SHA-1
    end;

  MD5SHAFinal(@toHashMD5.dataIn,  @resMD5,  toHashMD5.dataLength,  1, 2);
  MD5SHAFinal(@toHashSHA1.dataIn, @resSHA1, toHashSHA1.dataLength, 0, 1);
  for i := 0 to 15 do
    begin
      if resMD5[i] <> expectedMD5[i] then // difference detected, exit
        begin
          result := 1;
        end;
    end;

  for i := 0 to 19 do
    begin
      if resSHA1[i] <> expectedSHA1[i] then // difference detected, exit
        begin
          result := result + 2;
        end;
    end;
end;

// Return value:
//   0 - success
//   1 - error
function Test_HMAC_MD5: byte;
const secretKey: array[16] of byte = 
       (0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
        0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b);
const inData: array[8] of byte =
       ('H', 'i', ' ', 'T', 'h', 'e', 'r', 'e');
const expectedHMAC: array[16] of byte =
     (0x92, 0x94, 0x72, 0x7a, 0x36, 0x38, 0xbb, 0x1c, 
      0x13, 0xf4, 0x8e, 0xf8, 0x15, 0x8b, 0xfc, 0x9d);
var sKey: array[16] of byte;
    textToHash: array[8] of byte;
    i: byte;
    res: array[16] of byte;
begin
   result := 0;
   for i := 0 to 15 do
     sKey[i] := secretKey[i];
   for i := 0 to 7 do
     textToHash[i] := inData[i];
   HMAC_ShaMd5(@sKey, 16, @textToHash, 8, @res, 1);
   for i := 0 to 15 do
    begin
      if res[i] <> expectedHMAC[i] then
        begin
          result := 1;
        end;
    end;
end;

// Return value:
//   0 - success
//   1 - error
function Test_HMAC_SHA1: byte;
const secretKey: array[20] of byte =
       (0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
        0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
        0x0b, 0x0b, 0x0b, 0x0b);
const inData: array[8] of byte =
       ('H', 'i', ' ', 'T', 'h', 'e', 'r', 'e');
const expectedHMAC: array[20] of byte =
     (0xb6, 0x17, 0x31, 0x86, 0x55, 0x05, 0x72, 0x64, 0xe2, 0x8b, 0xc0, 
      0xb6, 0xfb, 0x37, 0x8c, 0x8e, 0xf1, 0x46, 0xbe, 0x00);
var sKey: array[20] of byte;
    textToHash: array[8] of byte;
    i: byte;
    res: array[20] of byte;
begin
   result := 0;
   for i := 0 to 19 do
     sKey[i] := secretKey[i];
   for i := 0 to 7 do
     textToHash[i] := inData[i];
   HMAC_ShaMd5(@sKey, 20, @textToHash, 8, @res, 0);
   for i := 0 to 19 do
    begin
      if res[i] <> expectedHMAC[i] then
        begin
          result := 1;
        end;
    end;
end;


// Return value:
//  0 - No Errors
//  1 - Invalid PRF calculated
//  2 - PRF function failed (invalid input params)
function Test_PRF1(): byte;
const cSecret: array[48] of byte = 
  (0x65, 0x6C, 0xE1, 0x16, 0x9E, 0x3E, 0x00, 0x02, 0x63, 0xBE, 0xDA,
   0x29, 0x01, 0x91, 0x7A, 0x10, 0x5C, 0xBE, 0x93, 0x49, 0x7A, 0x48, 
   0xDB, 0xFB, 0x1C, 0x23, 0xC6, 0xB8, 0xF1, 0x8F, 0xCB, 0x86, 0x3B, 
   0x48, 0x2B, 0x67, 0x2F, 0x34, 0xDC, 0xBD, 0x70, 0x82, 0x73, 0x78, 
   0x43, 0x54, 0xFC, 0x0E);
const cSeed: array[36] of byte = 
 (
 0x76, 0x77, 0x71, 0x3D, 0x4F, 0xDA, 0xE3, 0x03, 0x8A, 0x0D, 0x7F,
 0xFE, 0x07, 0xFB, 0x35, 0x50, 0xA3, 0x22, 0x08, 0x88, 0x99, 0x93,
 0x19, 0x78, 0x73, 0xE3, 0xE9, 0xBA, 0x9D, 0x69, 0x84, 0x0A, 0x92, 
 0xF7, 0xD7, 0x92
 );
const cLabel: array[15] of byte = ('c','l','i','e','n','t',' ','f','i','n','i','s','h','e','d');
const cExpected: array[12] of byte = (
      0x71, 0x88, 0x08, 0x83, 0xAD, 0x74, 0xBD, 0xEF, 0x75, 0xA3, 0x26, 0xED
      );
var vSecret: array[48] of byte;
    vLabel: array[15] of byte;
    vSeed: array[36] of byte;
    i: byte;
    prfOut: array[128] of byte;
begin
  result := 0;
  for i := 0 to 47 do
    vSecret[i] := cSecret[i];
  for i := 0 to 14 do
    vLabel[i] := cLabel[i];
  for i := 0 to 35 do
    vSeed[i] := cSeed[i];
  i := PRF(@vSecret, 48, @vLabel, 15, @vSeed, 36, @prfout, 12);
  if i <> 0 then
    begin
      // PRF Failed
      result := 2;
    end
  else
    begin
      for i := 0 to 11 do
        begin
          if prfOut[i] <> cExpected[i] then
            result := 1;
        end;
    end;
end;

// Return value:
//  0 - No Errors
//  1 - Invalid PRF calculated
//  2 - PRF function failed (invalid input params)
function Test_PRF2(): byte;
const cSeed: array[16] of byte =
               (0xa0, 0xba, 0x9f, 0x93, 0x6c, 0xda, 0x31, 0x18,
 		0x27, 0xa6, 0xf7, 0x96, 0xff, 0xd5, 0x19, 0x8c);
const cExpected: array[104] of byte = (
                0xd3, 0xd4, 0xd1, 0xe3, 0x49, 0xb5, 0xd5, 0x15, 0x04, 0x46, 0x66, 
                0xd5, 0x1d, 0xe3, 0x2b, 0xab, 0x25, 0x8c, 0xb5, 0x21, 0xb6, 0xb0, 
                0x53, 0x46, 0x3e, 0x35, 0x48, 0x32, 0xfd, 0x97, 0x67, 0x54, 0x44, 
                0x3b, 0xcf, 0x9a, 0x29, 0x65, 0x19, 0xbc, 0x28, 0x9a, 0xbc, 0xbc, 
                0x11, 0x87, 0xe4, 0xeb, 0xd3, 0x1e, 0x60, 0x23, 0x53, 0x77, 0x6c, 
                0x40, 0x8a, 0xaf, 0xb7, 0x4c, 0xbc, 0x85, 0xef, 0xf6, 0x92, 0x55, 
                0xf9, 0x78, 0x8f, 0xaa, 0x18, 0x4c, 0xbb, 0x95, 0x7a, 0x98, 0x19, 
                0xd8, 0x4a, 0x5d, 0x7e, 0xb0, 0x06, 0xeb, 0x45, 0x9d, 0x3a, 0xe8, 
                0xde, 0x98, 0x10, 0x45, 0x4b, 0x8b, 0x2d, 0x8f, 0x1a, 0xfb, 0xc6, 
                0x55, 0xa8, 0xc9, 0xa0, 0x13
      );
var vSecret: array[48] of byte;
    vLabel: array[14] of char;
    vSeed: array[64] of byte;
    i: byte;
    prfOut: array[128] of byte;
begin
  result := 0;
  for i := 0 to 47 do
    vSecret[i] := 0xAB;
  vLabel := 'PRF Testvector';
  for i := 0 to 63 do
    vSeed[i] := 0xCD;
  i := PRF(@vSecret, 48, @vLabel, 14, @vSeed, 64, @prfout, 104);
  if i <> 0 then
    begin
      // PRF Failed
      result := 2;
    end
  else
    begin
      for i := 0 to 103 do
        begin
          if prfOut[i] <> cExpected[i] then
            result := 1;
        end;
    end;
end;

// Return value:
//  0 - No Errors
//  1 - Invalid PRF calculated
//  2 - PRF function failed (invalid input params)
function Test_PRF3(): byte;
const cMasterSecret: array[48] of byte=
(
                0x4A, 0x1A, 0x51, 0x2C, 0x01, 0x60, 0xBC, 0x02,
		0x3C, 0xCF, 0xBC, 0x83, 0x3F, 0x03, 0xBC, 0x64,
		0x88, 0xC1, 0x31, 0x2F, 0x0B, 0xA9, 0xA2, 0x77,
		0x16, 0xA8, 0xD8, 0xE8, 0xBD, 0xC9, 0xD2, 0x29,
		0x38, 0x4B, 0x7A, 0x85, 0xBE, 0x16, 0x4D, 0x27,
		0x33, 0xD5, 0x24, 0x79, 0x87, 0xB1, 0xC5, 0xA2
);
const cSeed: array[64] of byte =
               (0x3F, 0xFB, 0x11, 0xC4, 0x6C, 0xBF, 0xA5, 0x7A,
		0x54, 0x40, 0xDA, 0xE8, 0x22, 0xD3, 0x11, 0xD3,
		0xF7, 0x6D, 0xE4, 0x1D, 0xD9, 0x33, 0xE5, 0x93,
		0x70, 0x97, 0xEB, 0xA9, 0xB3, 0x66, 0xF4, 0x2A,
		0x00, 0x00, 0x00, 0x02, 0x6A, 0x66, 0x43, 0x2A,
		0x8D, 0x14, 0x43, 0x2C, 0xEC, 0x58, 0x2D, 0x2F,
		0xC7, 0x9C, 0x33, 0x64, 0xBA, 0x04, 0xAD, 0x3A,
		0x52, 0x54, 0xD6, 0xA5, 0x79, 0xAD, 0x1E, 0x00);
const cExpected: array[112] of byte = (
                0x59, 0x59, 0xBE, 0x8E, 0x41, 0x3A, 0x77, 0x74,
		0x8B, 0xB2, 0xE5, 0xD3, 0x60, 0xAC, 0x4D, 0x35,
		0xDF, 0xFB, 0xC8, 0x1E, 0x9C, 0x24, 0x9C, 0x8B,
		0x0E, 0xC3, 0x1D, 0x72, 0xC8, 0x84, 0x9D, 0x57,
		0x48, 0x51, 0x2E, 0x45, 0x97, 0x6C, 0x88, 0x70,
		0xBE, 0x5F, 0x01, 0xD3, 0x64, 0xE7, 0x4C, 0xBB,
		0x11, 0x24, 0xE3, 0x49, 0xE2, 0x3B, 0xCD, 0xEF,
		0x7A, 0xB3, 0x05, 0x39, 0x5D, 0x64, 0x8A, 0x44,
		0x11, 0xB6, 0x69, 0x88, 0x34, 0x2E, 0x8E, 0x29,
		0xD6, 0x4B, 0x7D, 0x72, 0x17, 0x59, 0x28, 0x05,
		0xAF, 0xF9, 0xB7, 0xFF, 0x66, 0x6D, 0xA1, 0x96,
		0x8F, 0x0B, 0x5E, 0x06, 0x46, 0x7A, 0x44, 0x84,
		0x64, 0xC1, 0xC8, 0x0C, 0x96, 0x44, 0x09, 0x98,
		0xFF, 0x92, 0xA8, 0xB4, 0xC6, 0x42, 0x28, 0x71
      );
var vSecret: array[48] of byte;
    vLabel: array[13] of char;
    vSeed: array[64] of byte;
    i: byte;
    prfOut: array[128] of byte;
begin
  result := 0;
  for i := 0 to 47 do
    vSecret[i] := cMasterSecret[i];
  vLabel := 'key expansion';
  for i := 0 to 63 do
    vSeed[i] := cSeed[i];
  i := PRF(@vSecret, 48, @vLabel, 13, @vSeed, 64, @prfout, 112);
  if i <> 0 then
    begin
      // PRF Failed
      result := 2;
    end
  else
    begin
      for i := 0 to 111 do
        begin
          if prfOut[i] <> cExpected[i] then
            result := 1;
        end;
    end;
end;

end.
